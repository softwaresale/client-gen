// Code generated by mockery v2.46.3. DO NOT EDIT.

package importsmocks

import (
	imports "github.com/softwaresale/client-gen/v2/internal/codegen/imports"
	mock "github.com/stretchr/testify/mock"

	types "github.com/softwaresale/client-gen/v2/internal/types"
)

// MockImportManager is an autogenerated mock type for the ImportManager type
type MockImportManager struct {
	mock.Mock
}

// GetEntityImports provides a mock function with given fields: entity
func (_m *MockImportManager) GetEntityImports(entity ...types.EntitySpec) []imports.GenericImport {
	_va := make([]interface{}, len(entity))
	for _i := range entity {
		_va[_i] = entity[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEntityImports")
	}

	var r0 []imports.GenericImport
	if rf, ok := ret.Get(0).(func(...types.EntitySpec) []imports.GenericImport); ok {
		r0 = rf(entity...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]imports.GenericImport)
		}
	}

	return r0
}

// GetServiceImports provides a mock function with given fields: service
func (_m *MockImportManager) GetServiceImports(service types.ServiceDefinition) []imports.GenericImport {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceImports")
	}

	var r0 []imports.GenericImport
	if rf, ok := ret.Get(0).(func(types.ServiceDefinition) []imports.GenericImport); ok {
		r0 = rf(service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]imports.GenericImport)
		}
	}

	return r0
}

// RegisterProvider provides a mock function with given fields: providerName
func (_m *MockImportManager) RegisterProvider(providerName string) {
	_m.Called(providerName)
}

// RegisterType provides a mock function with given fields: providerName, typeName
func (_m *MockImportManager) RegisterType(providerName string, typeName string) {
	_m.Called(providerName, typeName)
}

// NewMockImportManager creates a new instance of MockImportManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImportManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImportManager {
	mock := &MockImportManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
