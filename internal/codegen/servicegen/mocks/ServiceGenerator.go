// Code generated by mockery v2.46.3. DO NOT EDIT.

package servicegenmocks

import (
	io "io"

	imports "github.com/softwaresale/client-gen/v2/internal/codegen/imports"

	mock "github.com/stretchr/testify/mock"

	types "github.com/softwaresale/client-gen/v2/internal/types"
)

// MockServiceGenerator is an autogenerated mock type for the ServiceGenerator type
type MockServiceGenerator struct {
	mock.Mock
}

// GenerateConfig provides a mock function with given fields: writer, config, resolver
func (_m *MockServiceGenerator) GenerateConfig(writer io.Writer, config types.APIConfig, resolver imports.ImportManager) error {
	ret := _m.Called(writer, config, resolver)

	if len(ret) == 0 {
		panic("no return value specified for GenerateConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, types.APIConfig, imports.ImportManager) error); ok {
		r0 = rf(writer, config, resolver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateEntity provides a mock function with given fields: writer, entity, resolver
func (_m *MockServiceGenerator) GenerateEntity(writer io.Writer, entity types.EntitySpec, resolver imports.ImportManager) error {
	ret := _m.Called(writer, entity, resolver)

	if len(ret) == 0 {
		panic("no return value specified for GenerateEntity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, types.EntitySpec, imports.ImportManager) error); ok {
		r0 = rf(writer, entity, resolver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateService provides a mock function with given fields: writer, service, resolver
func (_m *MockServiceGenerator) GenerateService(writer io.Writer, service types.ServiceDefinition, resolver imports.ImportManager) error {
	ret := _m.Called(writer, service, resolver)

	if len(ret) == 0 {
		panic("no return value specified for GenerateService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, types.ServiceDefinition, imports.ImportManager) error); ok {
		r0 = rf(writer, service, resolver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockServiceGenerator creates a new instance of MockServiceGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceGenerator {
	mock := &MockServiceGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
